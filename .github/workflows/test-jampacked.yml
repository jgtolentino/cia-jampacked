name: JamPacked CI/CD Tests

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libopencv-dev \
          libsndfile1 \
          ffmpeg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Download language models
      run: |
        python -m spacy download en_core_web_sm
        python -m spacy download xx_ent_wiki_sm  # Multilingual
    
    - name: Run unit tests
      run: |
        python tests/run_tests.py
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_jampacked_integration.py -v
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run async tests
      run: |
        python tests/run_tests.py --async
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Generate coverage report
      run: |
        coverage run -m pytest tests/
        coverage xml
        coverage report
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          coverage.json
          test_report.json
          pytest_html_report.html
    
    - name: Lint code
      run: |
        pip install flake8 black mypy
        flake8 autonomous-intelligence/ --max-line-length=120
        black --check autonomous-intelligence/
        mypy autonomous-intelligence/ --ignore-missing-imports

  integration-test-mcp:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Set up SQLite MCP test environment
      run: |
        # Create test MCP SQLite database
        mkdir -p /tmp/mcp-sqlite-server/data
        touch /tmp/mcp-sqlite-server/data/database.sqlite
    
    - name: Run MCP integration tests
      run: |
        export TEST_MCP_DB_PATH="/tmp/mcp-sqlite-server/data/database.sqlite"
        python -m pytest tests/test_jampacked_integration.py::TestMCPIntegrationEndToEnd -v
    
    - name: Verify MCP tables created
      run: |
        sqlite3 /tmp/mcp-sqlite-server/data/database.sqlite ".tables" | grep jampacked_

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/test_custom_intelligence.py::TestPerformanceOptimization -v --benchmark-only
    
    - name: Archive benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: .benchmarks/

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: pyupio/safety@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r autonomous-intelligence/ -ll

  deploy-test-report:
    runs-on: ubuntu-latest
    needs: [test, integration-test-mcp, performance-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate comprehensive test report
      run: |
        python scripts/generate_test_dashboard.py
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./test-reports