version: '3.8'

services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: jampacked-api
    ports:
      - "8080:8080"
    env_file:
      - ../.env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_started
      redis:
        condition: service_started
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    networks:
      - jampacked-network

  postgres:
    image: postgres:15-alpine
    container_name: jampacked-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-creative_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword}
      POSTGRES_DB: ${POSTGRES_DB:-campaign_db}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../database/postgres.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-creative_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jampacked-network

  chromadb:
    image: chromadb/chroma:latest
    container_name: jampacked-chromadb
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_AUTH_PROVIDER=${CHROMA_AUTH_PROVIDER:-token}
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN:-test-token}
      - PERSIST_DIRECTORY=/chroma/data
    volumes:
      - chromadata:/chroma/data
    networks:
      - jampacked-network

  redis:
    image: redis:7-alpine
    container_name: jampacked-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redisdata:/data
    networks:
      - jampacked-network

  nginx:
    image: nginx:alpine
    container_name: jampacked-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - jampacked-network

  # Optional: Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: jampacked-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - promdata:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - jampacked-network

  grafana:
    image: grafana/grafana:latest
    container_name: jampacked-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafanadata:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - jampacked-network

volumes:
  pgdata:
    driver: local
  chromadata:
    driver: local
  redisdata:
    driver: local
  promdata:
    driver: local
  grafanadata:
    driver: local

networks:
  jampacked-network:
    driver: bridge