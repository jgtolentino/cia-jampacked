apiVersion: v1
kind: Namespace
metadata:
  name: jampacked
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jampacked-config
  namespace: jampacked
data:
  JAMPACKED_ENV: "production"
  WORKSPACE_ROOT: "/data/jampacked"
  MCP_SQLITE_PATH: "/data/mcp/database.sqlite"
  ENABLE_AUTONOMOUS: "true"
  LOG_LEVEL: "INFO"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jampacked-workspace-pvc
  namespace: jampacked
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mcp-data-pvc
  namespace: jampacked
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jampacked-core
  namespace: jampacked
  labels:
    app: jampacked-core
spec:
  replicas: 3
  selector:
    matchLabels:
      app: jampacked-core
  template:
    metadata:
      labels:
        app: jampacked-core
    spec:
      containers:
      - name: jampacked-core
        image: jampacked/core:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: api
        - containerPort: 9090
          name: metrics
        envFrom:
        - configMapRef:
            name: jampacked-config
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
          limits:
            memory: "8Gi"
            cpu: "4"
        volumeMounts:
        - name: workspace
          mountPath: /data/jampacked
        - name: mcp-data
          mountPath: /data/mcp
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: workspace
        persistentVolumeClaim:
          claimName: jampacked-workspace-pvc
      - name: mcp-data
        persistentVolumeClaim:
          claimName: mcp-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: jampacked-core-service
  namespace: jampacked
spec:
  selector:
    app: jampacked-core
  ports:
  - name: api
    port: 8080
    targetPort: 8080
  - name: metrics
    port: 9090
    targetPort: 9090
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pattern-discovery-worker
  namespace: jampacked
  labels:
    app: pattern-discovery-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pattern-discovery-worker
  template:
    metadata:
      labels:
        app: pattern-discovery-worker
    spec:
      containers:
      - name: worker
        image: jampacked/pattern-worker:latest
        imagePullPolicy: Always
        env:
        - name: WORKER_TYPE
          value: "pattern_discovery"
        - name: QUEUE_URL
          value: "redis://redis-service:6379/0"
        envFrom:
        - configMapRef:
            name: jampacked-config
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        volumeMounts:
        - name: workspace
          mountPath: /data/jampacked
        - name: pattern-memory
          mountPath: /data/patterns
      volumes:
      - name: workspace
        persistentVolumeClaim:
          claimName: jampacked-workspace-pvc
      - name: pattern-memory
        emptyDir:
          sizeLimit: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: multimodal-gpu-worker
  namespace: jampacked
  labels:
    app: multimodal-gpu-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: multimodal-gpu-worker
  template:
    metadata:
      labels:
        app: multimodal-gpu-worker
    spec:
      nodeSelector:
        accelerator: nvidia-tesla-t4
      containers:
      - name: worker
        image: jampacked/multimodal-worker:latest
        imagePullPolicy: Always
        env:
        - name: WORKER_TYPE
          value: "multimodal_analysis"
        - name: QUEUE_URL
          value: "redis://redis-service:6379/2"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: ENABLE_GPU
          value: "true"
        envFrom:
        - configMapRef:
            name: jampacked-config
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
            nvidia.com/gpu: 1
          limits:
            memory: "8Gi"
            cpu: "4"
            nvidia.com/gpu: 1
        volumeMounts:
        - name: workspace
          mountPath: /data/jampacked
        - name: model-cache
          mountPath: /root/.cache
      volumes:
      - name: workspace
        persistentVolumeClaim:
          claimName: jampacked-workspace-pvc
      - name: model-cache
        emptyDir:
          sizeLimit: 20Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: jampacked
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --appendonly
        - "yes"
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: jampacked
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  clusterIP: None
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: jampacked-core-hpa
  namespace: jampacked
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: jampacked-core
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jampacked-ingress
  namespace: jampacked
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - jampacked.pulser.com
    secretName: jampacked-tls
  rules:
  - host: jampacked.pulser.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jampacked-core-service
            port:
              number: 8080